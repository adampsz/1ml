let print: forall a. a -> unit = external print [forall a. a -> unit] in
let add: int -> int -> int = external add [int -> int -> int] in
let sub: int -> int -> int = external sub [int -> int -> int] in

let _: unit = print [string] "\n0. Hello\n" in

let _: unit = print [int] (add 5 (sub 6 2)) in

(lambda [a], x: a, y: a. y) [int] 1 2 ;;

/*************************\
  Pairs (Record encoding)
\*************************/

let print: forall a. a -> unit = external print [forall a. a -> unit] in

let _: unit = print [string] "\n1. Pairs (Record encoding)\n" in

unpack pair, pair = pack {
  cons = lambda [l], [r], l: l, r: r. { l = l, r = r },
  fst =  lambda [l], [r], p: { l: l, r: r }. p.l,
  snd =  lambda [l], [r], p: { l: l, r: r }. p.r,
} as exists pair: * -> * -> * = lambda l, r. { l: l, r: r }. {
  cons: forall l, r. l -> r -> pair l r,
  fst:  forall l, r. pair l r -> l,
  snd:  forall l, r. pair l r -> r,
} in

let p: pair int bool = pair.cons [int] [bool] 6 true in

let _: unit = print [int]  (pair.fst [int] [bool] p) in
let _: unit = print [bool] (pair.snd [int] [bool] p) in

() ;;

/*************************\
  Pairs (Church encoding)
\*************************/

let print: forall a. a -> unit = external print [forall a. a -> unit] in

let _: unit = print [string] "\n2. Pairs (Church encoding)\n" in

unpack pair, pair = pack {
  cons = lambda [l], [r], l: l, r: r, [z], z: l -> r -> z. z l r,
  fst =  lambda [l], [r], p: (forall z. (l -> r -> z) -> z). p [l] (lambda l: l, r: r. l),
  snd =  lambda [l], [r], p: (forall z. (l -> r -> z) -> z). p [r] (lambda l: l, r: r. r),
} as exists pair: * -> * -> * = lambda l, r. forall z. (l -> r -> z) -> z. {
  cons: forall l, r. l -> r -> pair l r,
  fst:  forall l, r. pair l r -> l,
  snd:  forall l, r. pair l r -> r,
} in

let p: pair int bool = pair.cons [int] [bool] 6 true in

let _: unit = print [int]  (pair.fst [int] [bool] p) in
let _: unit = print [bool] (pair.snd [int] [bool] p) in

// let _: unit = pair.cons [pair int bool] [unit] p () in

() ;;

/*****************************\
  Lists (right fold encoding)
\*****************************/

let panic: forall a. string -> a = external panic [forall a. string -> a] in
let print: forall a. a -> unit = external print [forall a. a -> unit] in
let add: int -> int -> int = external add [int -> int -> int] in
let sub: int -> int -> int = external sub [int -> int -> int] in

let _: unit = print [string] "\n3. Lists (right fold encoding)\n" in

unpack list, list = pack {
  nil   = lambda [a], [r], c: a -> r -> r, n: r. n,
  cons  = lambda [a], h: a, t: (forall r. (a -> r -> r) -> r -> r), [r], c: a -> r -> r, n: r. c h (t [r] c n),
  isnil = lambda [a], l: (forall r. (a -> r -> r) -> r -> r). l [bool] (lambda h: a, r: bool. false) true,
  head  = lambda [a], l: (forall r. (a -> r -> r) -> r -> r). l [unit -> a] (lambda h: a, r: unit -> a, _: unit. h) (lambda _: unit. panic [a] "head") (),
  tail  = lambda [a], l: (forall r. (a -> r -> r) -> r -> r), [r], c: a -> r -> r, n: r. l [(a -> r -> r) -> r] (lambda h: a, r: (a -> r -> r) -> r, g: a -> r -> r. g h (r c)) (lambda c: (a -> r -> r). n) (lambda h: a, t: r. t),
  foldr = lambda [a], [r], c: a -> r -> r, n: r, l: (forall r. (a -> r -> r) -> r -> r). l [r] c n,
  map   = lambda [a], [b], f: a -> b, l: (forall r. (a -> r -> r) -> r -> r), [r], c: b -> r -> r, n: r. l [r] (lambda h: a, r: r. c (f h) r) n,
} as exists list: * -> * = lambda a. forall r. (a -> r -> r) -> r -> r. {
  nil:   forall a. list a,
  cons:  forall a. a -> list a -> list a,
  isnil: forall a. list a -> bool,
  head:  forall a. list a -> a,
  tail:  forall a. list a -> list a,
  foldr: forall a, r. (a -> r -> r) -> r -> list a -> r,
  map:   forall a, b. (a -> b) -> list a -> list b,
} in

let append: forall a. list a -> list a -> list a = lambda [a], xs: list a, ys: list a. list.foldr [a] [list a] (list.cons [a]) ys xs in

let xs: list int = list.cons [int] 4 (list.cons [int] 5 (list.cons [int] 6 (list.nil [int]))) in
let ys: list int = list.map [int] [int] (add 3) xs in

let _: unit = print [string] " - Basics" in
let _: unit = print [int] (list.foldr [int] [int] add 0 xs) in
let _: unit = print [int] (list.head [int] xs) in
let _: unit = print [bool] (list.isnil [int] xs) in
let _: unit = print [bool] (list.isnil [int] (list.nil [int])) in

let _: unit = print [string] " - Mapped" in
let _: unit = print [int] (list.foldr [int] [int] add 0 ys) in

let _: unit = print [int] (list.head [int] ys) in
let _: unit = print [int] (list.head [int] (list.tail [int] ys)) in
let _: unit = print [int] (list.head [int] (list.tail [int] (list.tail [int] ys))) in

let _: unit = print [string] " - Append" in
let _: unit = list.foldr [int] [unit] (lambda x: int, _: unit. print [int] x) () (append [int] xs ys) in

let _: unit = print [string] " - Nested" in

let xxs: list (list int) = list.map [int] [list int] (lambda x: int. list.cons [int] x (list.cons [int] (sub x 3) (list.nil [int]))) xs in
let _: unit = list.foldr [list int] [unit] (lambda xs: list int, _: unit. print [int] (list.head [int] (list.tail [int] xs))) () xxs in

() ;;

/******************\
  Church numerals
\******************/

let print: forall a. a -> unit = external print [forall a. a -> unit] in
let add: int -> int -> int = external add [int -> int -> int] in
let mul: int -> int -> int = external mul [int -> int -> int] in

let _: unit = print [string] "\n4. Church numerals\n" in

unpack num, num = pack (
  let p: (forall a. (a -> a) -> a -> a) -> (forall a. (a -> a) -> a -> a)
       = lambda n: (forall a. (a -> a) -> a -> a), [a], s: a -> a, z: a.
         n [(a -> a) -> a] (lambda g: (a -> a) -> a, h: a -> a. h (g s)) (lambda u: (a -> a). z) (lambda u: a. u) in
  {
    z = lambda [a], s: a -> a, z: a. z,
    s = lambda n: (forall a. (a -> a) -> a -> a), [a], s: a -> a, z: a. s (n [a] s z),
    p = p,
    val = lambda n: (forall a. (a -> a) -> a -> a). n [int] (add 1) 0,
    add = lambda n: (forall a. (a -> a) -> a -> a), m: (forall a. (a -> a) -> a -> a), [a], s: a -> a, z: a. n [a] s (m [a] s z),
    sub = lambda n: (forall a. (a -> a) -> a -> a), m: (forall a. (a -> a) -> a -> a). m [forall a. (a -> a) -> a -> a] p n,
    mul = lambda n: (forall a. (a -> a) -> a -> a), m: (forall a. (a -> a) -> a -> a), [a], s: a -> a, z: a. n [a] (m [a] s) z,
    pow = lambda n: (forall a. (a -> a) -> a -> a), m: (forall a. (a -> a) -> a -> a), [a]. m [a -> a] (n [a]),
  }
) as exists num: * = forall a. (a -> a) -> a -> a. {
  z: num,
  s: num -> num,
  p: num -> num,
  val: num -> int,
  add: num -> num -> num,
  sub: num -> num -> num,
  mul: num -> num -> num,
  pow: num -> num -> num,
} in

let _0: num = num.z in
let _1: num = num.s _0 in
let _2: num = num.s _1 in
let _3: num = num.s _2 in
let _4: num = num.s _3 in

let _: unit = print [int] (num.val _4) in
let _: unit = print [int] (num.val (num.add _3 _4)) in
let _: unit = print [int] (num.val (num.mul _3 _4)) in
let _: unit = print [int] (num.val (num.pow _3 _4)) in
let _: unit = print [int] (num.val (num.sub _4 _3)) in

// 4 ^ 3 - ((2 * 3) + 4) = 64 - (6 + 4) = 64 - 10 = 54
let _: unit = print [int] (num.val (num.sub (num.pow _4 _3) (num.add (num.mul _2 _3) _4))) in

() ;;
